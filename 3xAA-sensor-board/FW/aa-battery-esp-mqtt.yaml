# This is an example of using ESPHome over MQTT
# If you keep your credentials in secret.yaml it should work as is
# You can choose to enable or disable the function of disabling sleep and set sleep duration.
# You will save a little power by disabling these functions, but will then not be able to use OTA

substitutions:
  name: "rdnx-aa"
  friendly_name: "RDNX-AA"
  device_description: "Rednexing AA ESP32"
  project_name: "Rednexing.AA ESP32"
  project_version: "0.0.1"
  update_interval: never

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.6.0
  name_add_mac_suffix: false
  project:
    name: ${project_name}
    version: ${project_version}
  on_boot:
  - priority: 1001
    then:
      - lambda: |- #we need to manually turn on awake before I2C is turned on (at prio 1000), or I2C will be held low and boot will halt
          pinMode(39, OUTPUT);
          digitalWrite(39, HIGH);
  - priority: 600
    then:
      - logger.log: 'Wake up, connect, send data, go back to sleep'
      - script.execute: consider_deep_sleep

esp32:
  board: esp32-s2-saola-1
  framework:
    type: arduino

logger:
  level: NONE #save some power by turning logging off
#  hardware_uart:
#    UART0

mqtt:
  id: mqtt_cli
  broker: !secret mqtt_broker
  username: !secret mqtt_username
  password: !secret mqtt_password
  discovery: True
  discover_ip: True
  birth_message:
  will_message:
  discovery_unique_id_generator: mac

ota:
- platform: esphome

wifi:
  ap:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
#  output_power: 13dB #output power can be reduced in order to save power if AP is not too far away, insufficient power may however slow down connection and thus consume more power
#  manual_ip: #set static IP, may speed up wifi connection
#    static_ip: 192.168.68.92
#    gateway: 192.168.68.1
#    subnet: 255.255.252.0
#    dns1: 192.168.68.1
#    dns2: 8.8.8.8

i2c:
  sda: GPIO41
  scl: GPIO42

sensor:

  - platform: aht10
    variant: AHT20 #yes, has to be AHT20 even if the sensor is actually AHT10
    temperature:
      name: "Temperature"
      id: temperature
    humidity:
      name: "Humidity"
      id: humidity
    update_interval: 1s

  - platform: adc
    pin: GPIO04
    id: battery_voltage
    entity_category: diagnostic
    name: "Battery V"
    icon: mdi:battery
    unit_of_measurement: "V"
    accuracy_decimals: 2
    attenuation: 12dB
    samples: 10
    update_interval: 1s
    filters:
      - multiply: 3.0 

  - platform: template
    name: "Battery %"
    update_interval: 1s
    accuracy_decimals: 0
    lambda: |-
      const float fullBat = 4.6; //change based on battery specs
      const float emptyBat = 3.8; //change based on battery specs
      return constrain((((id(battery_voltage).state-emptyBat)/(fullBat-emptyBat))*100), 0, 100); 
    unit_of_measurement: "%"  
    device_class: battery
    entity_category: diagnostic

  - platform: uptime
    type: seconds
    name: Uptime
    update_interval: 1s
    entity_category: diagnostic

  - platform: wifi_signal
    name: "Wifi dB"
    id: wifi_signal_db
    update_interval: 1s
    entity_category: diagnostic

  - platform: copy
    source_id: wifi_signal_db
    name: "WiFi %"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"
    device_class: ""

  - platform: template
    name: "Dew Point"
    id: dewpoint
    unit_of_measurement: "Â°C"
    device_class: temperature
    update_interval: 1s
    lambda: |-
      if (isnan(id(temperature).state) || isnan(id(humidity).state)) {
        return NAN;
      }
      const float temp = id(temperature).state;
      const float hum = id(humidity).state;
      const float a = 17.27;
      const float b = 237.7;
      const float alpha = ((a * temp) / (b + temp)) + log(hum / 100.0);
      const float dew_point = (b * alpha) / (a - alpha);
      return dew_point;
    icon: "mdi:weather-rainy"

  - platform: template
    name: "Mold Risk"
    unit_of_measurement: "%"
    update_interval: 1s
    lambda: |-
      if (isnan(id(temperature).state) || isnan(id(dewpoint).state)) {
        return NAN;
      }
      const float temp = (id(temperature).state * 1.8) +32;
      const float dew = (id(dewpoint).state * 1.8) +32;
      
      // Simplified calutation of mold risk temp - dew point, >10F = 0%, <5F =100% based on http://www.dpcalc.org
      float value = ((dew + 10 - temp) / 5) * 100;
      value = std::max(0.0f, std::min(100.0f, value));
      return std::round(value);
    icon: "mdi:asterisk"

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "IP Address"
      id: ip_address
      entity_category: diagnostic
    ssid:
      name: "Connected SSID"
      id: ssid
      entity_category: diagnostic
    mac_address:
      name: "Mac Address"
      id: mac_address
      entity_category: diagnostic

# Comment below to remove the option to change sleep time and prevent sleep
# Removing these options will reduce uptime and save some power
number:
  - platform: template
    name: "Sleep duration sec"
    id: sleep_duration_from_ha
    unit_of_measurement: s
    entity_category: diagnostic
    optimistic: true
    initial_value: 3600
    restore_value: true
    command_retain: true
    min_value: 0
    max_value: 100000
    step: 1

  - platform: template
    name: "Prevent sleep"
    id: prevent_sleep
    entity_category: diagnostic
    optimistic: true
    initial_value: 0
    command_retain: true
    min_value: 0
    max_value: 1
    step: 1
# Comment to here  

button:
  - platform: factory_reset
    name: "Factory Reset"
    id: Reset
    disabled_by_default: true
    entity_category: config

binary_sensor:
  - platform: status
    name: "Status"
    entity_category: diagnostic

  - platform: gpio
    pin:
      number: GPIO00
      mode: INPUT_PULLUP
      inverted: true
    name: "Boot Button"
    disabled_by_default: true
    on_multi_click:
      - timing:
        - ON for at least 4s
        then:
          - button.press: Reset

light:
  - platform: status_led
    name: "Status LED"
    disabled_by_default: true
    pin: GPIO38

deep_sleep:
  id: deep_sleep_control

script:
  - id: consider_deep_sleep
    mode: queued
    then:
      - repeat:
          count: 600
          then:
            - if:
                condition:
                  mqtt.connected:
                  #api.connected:
                then:
                  - logger.log: 'Connected!'
# Uncomment this part to go directly to sleep and remove the option to change sleep time and prevent sleep
#                  - logger.log: 'Going back to sleep'  
#                  - deep_sleep.enter: 
#                      id: deep_sleep_control
#                      sleep_duration: 3600s
# Uncomment to here

# Comment below to remove the option to change sleep time and prevent sleep
# Removing these options will reduce uptime and save some power
                  - delay: 500ms #we need a bit of time to sync
                  - if:
                      condition:
                        lambda: |-
                          return id(prevent_sleep).state == 1;
                        #on_value: binary_sensor.is_on: prevent_sleep
                      then:
                        - logger.log: 'Sleep prevented'
                        - delay: 1s
                        - script.execute: consider_deep_sleep
                      else:
                        - logger.log: 'Going back to sleep'  
                        - deep_sleep.enter: 
                            id: deep_sleep_control
                            sleep_duration: !lambda |- 
                                return id(sleep_duration_from_ha).state * 1000;
# Comment to here                                

                else:
                  - logger.log: 'Waiting for connection'
                  - delay: 100ms
      - logger.log: 'Did not connect, going back to sleep'
      - deep_sleep.enter:
          id: deep_sleep_control
# Uncomment this part to go directly to sleep and remove the option to change sleep time and prevent sleep          
#          sleep_duration: 3600s
# Uncomment to here

# Comment below to remove the option to change sleep time and prevent sleep
# Removing these options will reduce uptime and save some power
          sleep_duration: !lambda |- 
              return id(sleep_duration_from_ha).state * 1000;
# Comment to here 
